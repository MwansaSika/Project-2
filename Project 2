
#include <iostream>
#include "stdafx.h"
#include "savings.h"
#include <fstream>
#include <stdlib.h>
#include <iomanip>
#include "checking.h"

using namespace std;

//Prototypes.
int printMenu(fstream*, fstream*);
void TheTotalamount(Savings*, Checking*, fstream*);
void Withdrawforsaving(Savings*, double, fstream*);
void Withdrawforchecking(Checking*, double, fstream*);

//commandline for the arguments.
int main(int argc, char* argv[])
{
	if (argc < 3)
		exit(1);
	else
	{
		//stream files needed.
		fstream inFile, outFile;

		//For the input file.
		inFile.open(argv[1], ios::in);

		if (!inFile)
		{
			cout << "InFile not found!";
			exit(1);
		}

		//For the output file.
		outFile.open(argv[2], ios::out);

		if (!outFile)
		{
			cout << "OutFile not found!";
			exit(1);
		}


		//When the if sttements pass
		if (inFile && outFile)
		{
			Checking CheckingAccount;
			Savings SavingAccount;
			int choice = 0;
			double amount = 0;

			//Menu needs to be in a loop.
			do
			{
				choice = printMenu(&inFile, &outFile);
				switch (choice)

				{

				case 1:
				case 2:
					outFile << "Enter amount to deposit: ";
					inFile >> amount;

					//Savings will equal 1, Checking will equal 2.
					if (choice == 1)
						//Place to savings.
						SavingAccount.deposit(amount);
					else
						//Place to checking.
						CheckingAccount.deposit(amount);
					break;
					
				case 3:
				case 4:
					outFile << "Enter amount to withdraw: ";
					inFile >> amount;
					//savings equals 3, checking equal 2.
					if (choice == 3)
						Withdrawforsaving(&SavingAccount, amount, &outFile);
					else
						Withdrawforchecking(&CheckingAccount, amount, &outFile);
					break;
				case 5:
					TheTotalAmount(&SavingAccount, &CheckingAccount, &outFile);
					break;
				case 6:
					break;
				default:
					break;
				}
			} while (choice != 6);

			//Close the file streams.
			inFile.close();
			outFile.close();
		}
	}
}




//Print out te menu and if condition not met it will quit the program
int printMenu(fstream* inFile, fstream* outFile)
{
	*outFile << "\n\n";
	*outFile << "******** BANK ACCOUNT MENU ********\n\n";
	*outFile << "1. Savings Account Deposit\n";
	*outFile << "2. Checking Account Deposit\n";
	*outFile << "3. Savings Account Withdrawal\n";
	*outFile << "4. Checking Account Withdrawal\n";
	*outFile << "5. Update and Display Account Statistics\n";
	*outFile << "6. Exit\n\n";
	*outFile << "Your choice, please: (1-6) ";

	int choice;
	*inFile >> choice;

	while (choice > 6 || choice < 1)
	{
		*outFile << "Enter a number from 1 through 6 please: ";
		*inFile >> choice;
	}

	return choice;
}


void Withdrawforsaving(Savings* acc, double amount, fstream* outFile)
{
	int result = acc->withdraw(amount);
	if (result == -1)
		*outFile << "Account is inactive.\n\n";
	else if (result == -2)
	{
		*outFile << "\nYour account has fallen below $25.00.";
		*outFile << "\nIt will be deactivated.\n";
	}
}


void Withdrawforsaving(Checking* acc, double amount, fstream* outFile)
{
	int result = acc->withdraw(amount);
	if (result == -1)
	{
		*outFile << "You are attempting to withdraw more ";
		*outFile << "than the account balance.\n";
	}
}


void TheTotalAmount(Savings* sAcc, Checking* cAcc, fstream* outFile)
{
	
	*outFile << fixed << setprecision(2) << "\n\n";
	*outFile << "SAVINGS ACCOUNT MONTHLY STATISTICS:\n";
	*outFile << "Withdrawals:       " << sAcc->getWithdrawals() << "\n";
	*outFile << "Deposits:       " << sAcc->getDeposits() << "\n";
	*outFile << "Service Charges:   " << sAcc->monthlyProc() << "\n";
	*outFile << "\nEnding Balance:    " << sAcc->getBalance() << "\n";
	*outFile << "\n\n\n";
	*outFile << "CHECKING ACCOUNT MONTHLY STATISTICS:\n";
	*outFile << "Withdrawals:       " << cAcc->getWithdrawals() << "\n";
	*outFile << "Deposits:       " << cAcc->getDeposits() << "\n";
	*outFile << "Service Charges:   " << cAcc->monthlyProc() << "\n";
	*outFile << "\nEnding Balance:    " << cAcc->getBalance() << "\n";
	*outFile << "\n";
}

account.cpp
#include "account.h"

Account::Account()
{
	balance = 0.00;
	serviceCharges = 0.00;
	deposits = 0;
	interestRate = 0.05;
	withdrawals = 0;
	
}


Account::Account(double bal, double interest)
{	
	withdrawals = 0;
	interestRate = interest;
	serviceCharges = 0.00;
	balance = bal;
	deposits = 0;
}


void Account::calcInt()
{
	balance = balance + (interestRate / 12) * balance;
}


void Account::deposit(double amount)
{
	balance = balance + amount;

	deposits++;
}


int Account::withdraw(double amount)
{
	balance balance - amount;

	withdrawals++;

	//Since this is just the parent class, return 1.
	return 1;
}

double Account::monthlyProc()
{
	calcInt();
	balance = balance - serviceCharges;
	withdrawals = 0;
	deposits = 0;

	double total = serviceCharges;

	serviceCharges = 0;

	return total;
}

int Account::getDeposits()
{
	return deposits;
}

int Account::getWithdrawals()
{
	return withdrawals;
}



double Account::getBalance()
{
	return balance;
}

//account h file
account.h


#ifndef ACCOUNT_H
#define ACCOUNT_H

class Account
{
protected:
	double balance;
	int deposits;
	int withdrawals;
	double interestRate;
	double serviceCharges;
	virtual void calcInt();
public:
	Account();
	Account(double, double);
	virtual void deposit(double);
	virtual int withdraw(double);
	virtual double monthlyProc();

	int getWithdrawals();
	int getDeposits();
	double getBalance();
};




checking.cpp
#include "checking.h"


int Checking::withdraw(double amount)
{
	double newBal = balance - amount;

	//checking on withdraw
	if (newBal < 0)
	{
		serviceCharges -= 15;
		return -1;
	}
	else
	{
		balance = newBal;
		withdrawals++;
	}

	return 1;
}


void Checking::deposit(double amount)
{
	Account::deposit(amount);
}


double Checking::monthlyProc()
{
	serviceCharges += 5 + (0.1 * withdrawals);
	return Account::monthlyProc();
}


checking.h

#ifndef CHECKING_H
#define CHECKING_H

#include "account.h"

class Checking : public Account
{
public:
	Checking() : Account()
	{
	
	}
	Checking(double bal, double interest) : Account(bal, interest)
	{
	
	}
};

//saving source

	void deposit(double);
	double monthlyProc();
	int withdraw(double);


savings.cpp

#include "savings.h"


int Savings::withdraw(double amount)
{
	
	if (status)
	{
		Account::withdraw(amount);
	}

	else
	{
		return -1;
	}
		
	status = balance >= 25;

	if (!status)
		return -2;

	return 1;
}


void Savings::deposit(double amount)
{
	if (!status && (balance + amount) >= 25)
		status = true;

	Account::deposit(amount);
}

double Savings::monthlyProc()
{
	if (withdrawals > 4)
		serviceCharges += withdrawals;

	double total = Account::monthlyProc();

	status = balance >= 25;
	return total;
}

//saving file

savings.h

#ifndef SAVINGS_H
#define SAVINGS_H

#include "account.h"

class Savings : public Account
{
protected:
	bool status;
public:
	Savings() : Account()
	{ 
		status = false;
	}
	Savings(double bal, double interest) : Account(bal, interest){}
	int withdraw(double);
	void deposit(double);
	double monthlyProc();
};

